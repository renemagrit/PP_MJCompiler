

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/*--------------------------------------- TERMINALS ------------------------------------------*/
/* Keywords */
terminal PROG, PRINT, RETURN, VOID, READ, NEW, IF, ELSE, DO, WHILE, BREAK, CONTINUE, SWITCH, CASE, CLASS;
terminal EXTENDS, YIELD, DEFAULT, CONST;

/* Arithmetic operators */
terminal INC, DEC, MUL, DIV, PLUS, MINUS;

/* Relational and Logical operators  */
terminal MOD, AND, OR, ISEQUAL, NOTEQUAL, LESS, GREATER, LESSEQ, GREATEREQ, EQUAL;

/* Other symbols */
terminal SEMI, COLON, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, DOT;

terminal String IDENT; 
terminal Character CHARCONST;
terminal Integer NUMBER;
terminal Integer BOOLCONST;

/*-------------------------------------- NON TERMINALS ------------------------------------------*/

/* Program Non Terminals*/
nonterminal ProgramDeclarationList, ProgramDeclarationListValue, ConstDecl, VarDecl, ClassDecl;

/* Constant Non Terminals*/
nonterminal ConstDeclList, ConstVal;

/* VarDeclaration Non Terminals*/
nonterminal GlobalVarDecl, VarDeclList, VarVal;

/* Method Declaration Non Terminals*/
nonterminal RepeatMethodDecl, MethodDeclType, MethodDelVarList;

/*Formal Parameters Non Terminals*/
nonterminal FromParams, FromParamsList, FromParamsVal, FormParamsBegin, FormParamsEnd;

/* Statements*/
nonterminal Statement, ListStatementOpt;

/* If Statement */
nonterminal IfStatement, ElseStatement;

/* Do While Statement*/
nonterminal DoWhileStmt;

/* Switch Statement*/
nonterminal SwitchStmt, SwitchStmtBody, SwitchStmtList, SwitchStmtVal, DefaulStmt;

/*Return Statement*/
nonterminal ReturnStmt, ReturnExpr;

/* Print Statement */
nonterminal PrintStmtOpt;

/* Yield Statement */
nonterminal YieldStmt;

/* Actual Parameters*/
nonterminal ActParsDetail, ActPars, ActParsExprList;

/* Designator */
nonterminal DesigantorList, DesignatorActPars, DesignatorStatement;

/* Condition */
nonterminal ConditionStmt;

/*Expression*/
nonterminal ExprList, ExprListVal, ExprFactorOpt;

/* Relation Operators */
nonterminal Relop;

/* Assignment Operator */
nonterminal Assignop, AssignOpExpr;

/* Terms */
nonterminal TermRepeat;

/* Arithmetic Operators*/
nonterminal Addop, Mulop;

/* Constants */
nonterminal ConstOption;

nonterminal NegPrefix;
nonterminal BrackArrayList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodHeader, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, ReadStmt, PrintStmt;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact, CondTerm, Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FunctionCall;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr,Factor, Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct numConst, charConst, boolConst;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

precedence left ELSE;

/*-----------------------------------------------------------------------------------------------*/

/* PROGRAM */

Program ::= (Program) PROG ProgName ProgramDeclarationList LBRACE RepeatMethodDecl RBRACE;

ProgName ::= (ProgName) IDENT:progName;

ProgramDeclarationList ::= (MultiProgramDeclarationList) ProgramDeclarationList ProgramDeclarationListValue
			| (NoDecl) /*epsilon*/
			;
			
ProgramDeclarationListValue ::=(ConstProgramDeclaration) ConstDecl
			| (VarProgramDeclaration) VarDecl
			;

/* CONSTANT */

ConstDecl ::= (ConstDeclaration) CONST Type:constType ConstDeclList SEMI
			| (ErrorConstGlobalDeclarationSemi) CONST error:l SEMI
			{: parser.report_error("Izvrsen oporavak za CONST do ; u liniji "+ lleft, null ); :}
			| (ErrorConstGlobalDeclarationComma) error:l COMMA ConstDeclList SEMI
			{: parser.report_error("Izvrsen oporavak za CONST do , u liniji "+ lleft, null ); :}
			;

ConstDeclList ::= (ConstDeckarationList) ConstDeclList COMMA ConstVal
				| (SingleConstDeclaration) ConstVal
				;

ConstVal ::= (ConstValue) IDENT:constName EQUAL ConstOption;

/* VAR */

VarDecl ::= (VarDeclaration) Type:varType VarDeclList SEMI
			| (ErrorVarGlobalDeclarationSemi) error:l SEMI
			{: parser.report_error("Izvrsen oporavak za VarDecl do ; u liniji "+ lleft, null ); :}
			| (ErrorVarGlobalDeclarationComma) error:l COMMA VarDeclList SEMI
			{: parser.report_error("Izvrsen oporavak za VarDecl do , u liniji "+ lleft, null ); :}				
			;

VarDeclList ::= (VarDeclarationList) VarDeclList COMMA VarVal
			| (SingleVarDeclaration) VarVal
			;	
			
VarVal ::=  (VarValue) IDENT:varName BrackArrayList;

/* CLASS */
//TODO: Var list

ClassDecl ::= (ClassDeclaration) CLASS IDENT LBRACE RBRACE;
		
		
/* METHOD DECLARATION*/		

RepeatMethodDecl ::= (RepeatMethodDeclaration) RepeatMethodDecl MethodDecl
				| (NoRepeatMethodDeclaration) /*epsilon*/
				;

MethodDecl ::= (MethodDeclaration) MethodHeader FormParamsBegin FromParams FormParamsEnd  MethodDelVarList LBRACE ListStatementOpt RBRACE;

MethodHeader ::= (MethodHeader) MethodDeclType IDENT:methName;

MethodDeclType ::= (CustomMethodDeclType) Type:methType
				| (VoidMethodDeclType) VOID  
				;

MethodDelVarList ::= (MultiMethodDelVarList) MethodDelVarList VarDecl
				| (NoMethodDelVarList)/*epsilon*/
				;				

/* FORM PARAMETERS */

FormParamsBegin ::= (FormParamsBegin) LPAREN;

FormParamsEnd ::= (FormParamsEnd) RPAREN;

FromParams ::= (FromParameters) FromParamsList
				| (NoFromParameters) /*epsilon*/
				;
				
FromParamsList ::= (MultiFormParams) FromParamsList COMMA FromParamsVal
				| (SingleFormParams) FromParamsVal
				;

FromParamsVal ::= (FromParamsValue) Type:fromType VarVal
				| (ErrorFormalParamesComma) error:l
				{: parser.report_error("Izvrsen oporavak za FormParams do , ili ) u liniji "+ lleft, null ); :}
				;		
		

/* STATEMENTS */ 

Statement ::= (DesStatement) DesignatorStatement SEMI
			| (IfDetalStatement) IfStatement
			| (DoWhileStatement) DoWhileStmt
			| (YieldStatment) YieldStmt
			| (BreakStatement) BREAK SEMI
			| (ContinueStatement) CONTINUE SEMI
			| (ReturnStatement) ReturnStmt
			| (ReadStatement) ReadStmt
			| (PrintStatement) PrintStmt
			| (DetailStatement) LBRACE ListStatementOpt RBRACE
			;

ListStatementOpt ::= (StatementListOpt) ListStatementOpt Statement
			| (NoStatementListOpt) /* epsilon */
			;

/* IF STATEMENT */

IfStatement ::= (IfStatement) IF LPAREN ConditionStmt RPAREN Statement ElseStatement;

ElseStatement ::= (ElseStatements) ELSE Statement
			| (NoElseStatement) /*epsilon*/
			;

/* DO WHILE STATEMENTS */
DoWhileStmt ::= (DoWhileStatementDetail) DO Statement WHILE LPAREN ConditionStmt RPAREN SEMI;

/* SWITCH STATEMENT*/
SwitchStmt ::= (SwitchStatementDetail) SWITCH LPAREN Expr RPAREN LBRACE SwitchStmtBody RBRACE;

SwitchStmtBody ::= (SwitchStatmentBody) SwitchStmtList DefaulStmt;

SwitchStmtList ::= (SwitchStatementList) SwitchStmtList SwitchStmtVal
				|(SingleSwitchStatement) SwitchStmtVal
				;

SwitchStmtVal ::= (SwitchStatementValue) CASE numConst COLON ListStatementOpt;

DefaulStmt ::= (DefaultStatement) DEFAULT COLON ListStatementOpt
			|(NoDefaultStatement) /*epsilon*/ 
			;

/* RETURN STATEMENT*/

ReturnStmt ::= (ReturnStatementDetail) RETURN ReturnExpr SEMI;

ReturnExpr ::= (ReturnExpression) Expr
			|(NoReturnExpression) /*epsilon*/
			;
			
/* READ STATEMENT*/

ReadStmt ::= (ReadStatementDetail) READ LPAREN Designator RPAREN SEMI;


/* PRINT STATEMENT*/
PrintStmt ::= (PrintStatemtDetail) PRINT LPAREN Expr PrintStmtOpt RPAREN SEMI;

PrintStmtOpt ::= (PrintStatementOption) COMMA numConst
				| (NoPrintStatementOption)  /*epsilon*/
				;

/* YIELD STATEMENT*/
YieldStmt ::= (YieldStatamentDetail) YIELD Expr SEMI;

/* ACTUAL PARAMETERS*/

ActParsDetail ::= (ActualParametersDetail) ActPars
				| (NoActualParametersDetail) /*epsilon*/
				;

ActPars ::= (ActualParameters) ActParsExprList;

ActParsExprList ::= (ActParsExprListList) ActParsExprList COMMA Expr
				| (SingleActParsExprList) Expr
				;


/* DESIGNATOR*/

DesignatorStatement ::= (DesignatorStatementAssign) AssignOpExpr
					| (DesignatorStatementFuncCall) FunctionCall
					| (DesignatorStatementInc)  Designator INC
					| (DesignatorStatementDec) Designator DEC
					;

FunctionCall ::= (FunctionCall) Designator LPAREN ActParsDetail RPAREN;

AssignOpExpr ::= (AssignOpeeratorExpresion) Designator:desName Assignop Expr
				| (ErrorAssignExpression) error:l
				{: parser.report_error("Izvrsen oporavak za AssignOp do ; u liniji "+ lleft, null ); :}
				;

Designator ::= (Designator) IDENT:desigantorName DesigantorList;

DesigantorList ::= (DsgnList) LBRACKET Expr RBRACKET
				| (NoDsgnList) /*epsilon*/
				;

/* Condition */

ConditionStmt ::= (ConditionStatemnt) Condition
				| (ErrorCondition) error:l
				{: parser.report_error("Izvrsen oporavak za Condition do ) u liniji "+ lleft, null ); :}
				;

Condition ::= (MultiCondition) Condition OR CondTerm
			| (SingleCondition) CondTerm
			;
CondTerm ::= (MultiCondTerm) CondTerm AND CondFact
			| (SingleCondTerm) CondFact
			;
			
CondFact ::= (CondFactorSingle) Expr
			| (CondFactorMulti) Expr Relop Expr
			;		

/* Expression */

Expr ::= (Expression) NegPrefix Term ExprList
		| (SwitchStatement) SwitchStmt
		;

ExprList ::= (ExpressionList) ExprList ExprListVal
		| (NoExpressionList) /*epsilon*/
		;

ExprListVal ::= (ExpressionListValue) Addop Term;

ExprFactorOpt ::= (ExpressionFactorOption) LBRACKET Expr RBRACKET
				|(NoExpressionFactorOption)/*epsilon*/
				;

/* Terms */

Term ::= (BasicTerm) Factor TermRepeat;

TermRepeat ::= (MulOptTerm) Mulop Factor
			| (NoMulOptTerm) /*epsilon*/
			;
			
Factor ::= (FactorDesignator) Designator
			| (FactorFuncCall) FunctionCall
			| (FactorNumConst) numConst
			| (FactorCharConst) charConst
			| (FactorBoolConst) boolConst
			| (FactorNewType) NEW Type ExprFactorOpt
			| (FacorExpression) LPAREN Expr RPAREN
			;
			

/* Negative Value */

NegPrefix ::= (NegativePrefix) MINUS
		| (NoNegativePrefix) /*epsilon*/
		;

/* Arithmetic Operators*/

Addop ::= (PlusOp) PLUS
		| (MinusOp) MINUS;

Mulop ::= (MulOption) MUL
	| (DivOption) DIV
	| (ModOption) MOD
	;

/* Relation Operators*/

Relop ::= (IsEqualRelOp) ISEQUAL
		| (NotEqualRelOp) NOTEQUAL
		| (LessRelOp) LESS
		| (GreaterRelOp) GREATER
		| (LessEqRelOp) LESSEQ
		| (GreaterEqRelOp) GREATEREQ
		;

Assignop ::= (AssignOperator) EQUAL;

/* CONSTS */
numConst ::= (NumberConstant) NUMBER;

boolConst ::= (BoolConstant) BOOLCONST;
		
charConst ::= (CharConstant) CHARCONST;

ConstOption ::= (ConstOptionNumber) numConst
		| (ConstOptionBool) boolConst
		| (ConstOptionChar) charConst
		;

/* OTHER */
			
Type ::= (Type) IDENT:typeName;

BrackArrayList ::= (BrackArrayLst) LBRACKET RBRACKET
			| (NoBrackArrayList) /*epsilon*/
			;
			