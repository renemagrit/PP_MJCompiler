
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 26 20:42:07 CEST 2021
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Sat Jun 26 20:42:07 CEST 2021
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\067\010\000\002\002\004\000\002\066" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\010\005\000\002\010\003\000\002" +
    "\011\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\006\000\002\013\005\000\002\013\003\000\002\014\004" +
    "\000\002\007\006\000\002\015\004\000\002\015\002\000" +
    "\002\071\012\000\002\070\004\000\002\016\003\000\002" +
    "\016\003\000\002\017\004\000\002\017\002\000\002\023" +
    "\003\000\002\024\003\000\002\020\003\000\002\020\002" +
    "\000\002\021\005\000\002\021\003\000\002\022\004\000" +
    "\002\022\003\000\002\025\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\004\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\026\004\000\002\026\002\000" +
    "\002\027\010\000\002\030\004\000\002\030\002\000\002" +
    "\031\011\000\002\032\011\000\002\033\004\000\002\034" +
    "\004\000\002\034\003\000\002\035\006\000\002\036\005" +
    "\000\002\036\002\000\002\037\005\000\002\040\003\000" +
    "\002\040\002\000\002\073\007\000\002\074\010\000\002" +
    "\041\004\000\002\041\002\000\002\042\005\000\002\043" +
    "\003\000\002\043\002\000\002\044\003\000\002\045\005" +
    "\000\002\045\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\004\000\002\050\004\000\002\100\006\000\002" +
    "\057\005\000\002\057\003\000\002\072\004\000\002\046" +
    "\005\000\002\046\002\000\002\051\003\000\002\051\003" +
    "\000\002\077\005\000\002\077\003\000\002\076\005\000" +
    "\002\076\003\000\002\075\003\000\002\075\005\000\002" +
    "\101\005\000\002\101\003\000\002\052\004\000\002\052" +
    "\002\000\002\053\004\000\002\054\005\000\002\054\002" +
    "\000\002\103\004\000\002\060\004\000\002\060\002\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\005\000\002\102" +
    "\005\000\002\064\003\000\002\064\002\000\002\061\003" +
    "\000\002\061\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\104\003\000\002\106\003" +
    "\000\002\105\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\107\003\000\002\065\004\000\002" +
    "\065\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\004\005\001\002\000\004\002\330\001" +
    "\002\000\004\061\006\001\002\000\012\003\uffff\026\uffff" +
    "\054\uffff\061\uffff\001\002\000\012\003\ufffd\026\ufffd\054" +
    "\ufffd\061\ufffd\001\002\000\012\003\016\026\012\054\013" +
    "\061\020\001\002\000\012\003\ufffe\026\ufffe\054\ufffe\061" +
    "\ufffe\001\002\000\006\003\324\061\020\001\002\000\010" +
    "\007\uffec\055\uffec\061\uffec\001\002\000\012\003\ufffc\026" +
    "\ufffc\054\ufffc\061\ufffc\001\002\000\004\061\046\001\002" +
    "\000\006\047\022\051\021\001\002\000\012\003\ufffb\026" +
    "\ufffb\054\ufffb\061\ufffb\001\002\000\050\031\uff82\032\uff82" +
    "\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\044\uff82\045\uff82\047\uff82\051\uff82" +
    "\053\uff82\056\uff82\057\uff82\061\uff82\001\002\000\004\061" +
    "\026\001\002\000\012\003\ufff3\026\ufff3\054\ufff3\061\ufff3" +
    "\001\002\000\006\047\050\051\047\001\002\000\006\047" +
    "\044\051\043\001\002\000\006\047\ufff0\051\ufff0\001\002" +
    "\000\012\046\031\047\uff80\051\uff80\056\032\001\002\000" +
    "\006\047\ufff6\051\ufff6\001\002\000\010\047\uffef\051\uffef" +
    "\053\uffef\001\002\000\010\062\042\063\035\064\040\001" +
    "\002\000\004\057\033\001\002\000\010\047\uff81\051\uff81" +
    "\053\uff81\001\002\000\006\047\uff85\051\uff85\001\002\000" +
    "\046\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\047\uff88\050\uff88\051\uff88\053\uff88\057\uff88\001\002" +
    "\000\006\047\uff84\051\uff84\001\002\000\006\047\uff83\051" +
    "\uff83\001\002\000\044\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\047\uff87\051\uff87\053\uff87\057\uff87" +
    "\001\002\000\006\047\ufff5\051\ufff5\001\002\000\044\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047" +
    "\uff86\051\uff86\053\uff86\057\uff86\001\002\000\004\061\046" +
    "\001\002\000\012\003\ufff2\026\ufff2\054\ufff2\061\ufff2\001" +
    "\002\000\006\047\ufff1\051\ufff1\001\002\000\012\047\uff80" +
    "\051\uff80\053\uff80\056\032\001\002\000\004\061\051\001" +
    "\002\000\012\003\ufff8\026\ufff8\054\ufff8\061\ufff8\001\002" +
    "\000\004\046\031\001\002\000\006\047\ufff7\051\ufff7\001" +
    "\002\000\006\047\054\051\043\001\002\000\012\003\ufff4" +
    "\026\ufff4\054\ufff4\061\ufff4\001\002\000\010\007\063\055" +
    "\061\061\020\001\002\000\004\052\066\001\002\000\004" +
    "\061\064\001\002\000\004\061\uffe9\001\002\000\004\002" +
    "\001\001\002\000\010\007\uffed\055\uffed\061\uffed\001\002" +
    "\000\004\061\uffe8\001\002\000\004\052\uffea\001\002\000" +
    "\010\003\071\053\uffe2\061\020\001\002\000\010\003\uffe5" +
    "\053\uffe5\061\uffe5\001\002\000\006\051\uffe0\053\uffe0\001" +
    "\002\000\004\061\046\001\002\000\006\051\uffde\053\uffde" +
    "\001\002\000\006\051\320\053\uffe3\001\002\000\004\053" +
    "\075\001\002\000\010\003\uffe6\054\uffe6\061\uffe6\001\002" +
    "\000\010\003\uffe4\054\uffe4\061\uffe4\001\002\000\010\003" +
    "\100\054\077\061\020\001\002\000\032\003\uffd2\005\uffd2" +
    "\006\uffd2\010\uffd2\012\uffd2\014\uffd2\016\uffd2\017\uffd2\024" +
    "\uffd2\054\uffd2\055\uffd2\061\uffd2\001\002\000\006\047\022" +
    "\051\102\001\002\000\010\003\uffe7\054\uffe7\061\uffe7\001" +
    "\002\000\004\061\046\001\002\000\032\003\127\005\126" +
    "\006\114\010\106\012\117\014\122\016\125\017\107\024" +
    "\120\054\121\055\111\061\110\001\002\000\012\027\314" +
    "\030\316\046\315\052\170\001\002\000\042\003\uffd7\005" +
    "\uffd7\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\021\uffd7\024\uffd7\025\uffd7\054\uffd7\055" +
    "\uffd7\061\uffd7\001\002\000\004\052\307\001\002\000\004" +
    "\047\306\001\002\000\056\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\056\302\057\uffb0\001\002" +
    "\000\010\007\uffeb\055\uffeb\061\uffeb\001\002\000\042\003" +
    "\uffd6\005\uffd6\006\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\021\uffd6\024\uffd6\025\uffd6\054" +
    "\uffd6\055\uffd6\061\uffd6\001\002\000\004\047\301\001\002" +
    "\000\024\011\uff95\020\135\034\137\047\uffc4\052\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\001\002\000\042\003\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\021\uffdc\024\uffdc\025\uffdc\054\uffdc" +
    "\055\uffdc\061\uffdc\001\002\000\042\003\uffd5\005\uffd5\006" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\021\uffd5\024\uffd5\025\uffd5\054\uffd5\055\uffd5\061" +
    "\uffd5\001\002\000\004\052\267\001\002\000\022\011\uff95" +
    "\020\135\034\137\052\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\001\002\000\032\003\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\012\uffd2\014\uffd2\016\uffd2\017\uffd2\024\uffd2\054\uffd2\055" +
    "\uffd2\061\uffd2\001\002\000\030\003\127\005\126\006\114" +
    "\010\106\012\117\014\122\016\125\017\107\024\120\054" +
    "\121\061\110\001\002\000\004\047\uffb8\001\002\000\042" +
    "\003\uffdb\005\uffdb\006\uffdb\010\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\024\uffdb\025\uffdb" +
    "\054\uffdb\055\uffdb\061\uffdb\001\002\000\004\047\233\001" +
    "\002\000\004\052\133\001\002\000\004\047\uffb3\001\002" +
    "\000\036\003\uffd3\005\uffd3\006\uffd3\010\uffd3\012\uffd3\014" +
    "\uffd3\016\uffd3\017\uffd3\021\uffd3\024\uffd3\025\uffd3\054\uffd3" +
    "\055\uffd3\061\uffd3\001\002\000\004\047\uffb9\001\002\000" +
    "\042\003\uffda\005\uffda\006\uffda\010\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\024\uffda\025" +
    "\uffda\054\uffda\055\uffda\061\uffda\001\002\000\022\011\uff95" +
    "\020\135\034\137\052\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\001\002\000\032\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\047\uffa6\051\uffa6\053" +
    "\uffa6\057\uffa6\001\002\000\004\052\212\001\002\000\006" +
    "\051\205\053\uffc0\001\002\000\016\011\uff96\052\uff96\061" +
    "\uff96\062\uff96\063\uff96\064\uff96\001\002\000\016\011\141" +
    "\052\151\061\110\062\042\063\035\064\040\001\002\000" +
    "\004\061\020\001\002\000\044\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\047\uff9c\051\uff9c\053\uff9c" +
    "\057\uff9c\001\002\000\046\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\047\uff9d\051\uff9d\052\170\053" +
    "\uff9d\057\uff9d\001\002\000\044\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\051\uff9b\053\uff9b" +
    "\057\uff9b\001\002\000\036\033\uffa4\034\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\047\uffa4\051\uffa4\053\uffa4\057\uffa4\001\002\000\044\031" +
    "\155\032\157\033\uff9e\034\uff9e\035\154\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\047" +
    "\uff9e\051\uff9e\053\uff9e\057\uff9e\001\002\000\044\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\047\uff99" +
    "\051\uff99\053\uff99\057\uff99\001\002\000\044\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a\051" +
    "\uff9a\053\uff9a\057\uff9a\001\002\000\022\011\uff95\020\135" +
    "\034\137\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001" +
    "\002\000\004\053\153\001\002\000\044\031\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\047\uff97\051\uff97" +
    "\053\uff97\057\uff97\001\002\000\016\011\uff90\052\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\001\002\000\016\011\uff92" +
    "\052\uff92\061\uff92\062\uff92\063\uff92\064\uff92\001\002\000" +
    "\036\033\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\047\uffa0\051\uffa0\053" +
    "\uffa0\057\uffa0\001\002\000\016\011\uff91\052\uff91\061\uff91" +
    "\062\uff91\063\uff91\064\uff91\001\002\000\016\011\141\052" +
    "\151\061\110\062\042\063\035\064\040\001\002\000\036" +
    "\033\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\047\uff9f\051\uff9f\053\uff9f" +
    "\057\uff9f\001\002\000\036\033\163\034\164\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\047\uffa7\051\uffa7\053\uffa7\057\uffa7\001\002\000\016\011" +
    "\uff94\052\uff94\061\uff94\062\uff94\063\uff94\064\uff94\001\002" +
    "\000\016\011\uff93\052\uff93\061\uff93\062\uff93\063\uff93\064" +
    "\uff93\001\002\000\036\033\uffa5\034\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\047" +
    "\uffa5\051\uffa5\053\uffa5\057\uffa5\001\002\000\016\011\141" +
    "\052\151\061\110\062\042\063\035\064\040\001\002\000" +
    "\036\033\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\047\uffa3\051\uffa3\053" +
    "\uffa3\057\uffa3\001\002\000\024\011\uff95\020\135\034\137" +
    "\052\uff95\053\uffbd\061\uff95\062\uff95\063\uff95\064\uff95\001" +
    "\002\000\006\051\176\053\uffbc\001\002\000\004\053\uffbe" +
    "\001\002\000\006\051\uffba\053\uffba\001\002\000\004\053" +
    "\175\001\002\000\044\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\047\uffb5\051\uffb5\053\uffb5\057\uffb5" +
    "\001\002\000\022\011\uff95\020\135\034\137\052\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\001\002\000\006\051\uffbb" +
    "\053\uffbb\001\002\000\046\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\047\uffa1\051\uffa1\053\uffa1\056" +
    "\202\057\uffa1\001\002\000\044\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\047\uff98\051\uff98\053\uff98" +
    "\057\uff98\001\002\000\022\011\uff95\020\135\034\137\052" +
    "\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002\000\004" +
    "\057\204\001\002\000\044\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\047\uffa2\051\uffa2\053\uffa2\057" +
    "\uffa2\001\002\000\004\063\035\001\002\000\004\053\207" +
    "\001\002\000\004\047\210\001\002\000\042\003\uffc2\005" +
    "\uffc2\006\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\024\uffc2\025\uffc2\054\uffc2\055" +
    "\uffc2\061\uffc2\001\002\000\004\053\uffc1\001\002\000\022" +
    "\011\uff95\020\135\034\137\052\uff95\061\uff95\062\uff95\063" +
    "\uff95\064\uff95\001\002\000\004\053\214\001\002\000\004" +
    "\054\215\001\002\000\004\021\221\001\002\000\010\021" +
    "\uffca\025\uffca\055\uffca\001\002\000\010\021\221\025\226" +
    "\055\uffc7\001\002\000\004\055\225\001\002\000\004\063" +
    "\035\001\002\000\004\050\223\001\002\000\036\003\uffd2" +
    "\005\uffd2\006\uffd2\010\uffd2\012\uffd2\014\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\024\uffd2\025\uffd2\054\uffd2\055\uffd2\061\uffd2" +
    "\001\002\000\036\003\127\005\126\006\114\010\106\012" +
    "\117\014\122\016\125\017\107\021\uffc9\024\120\025\uffc9" +
    "\054\121\055\uffc9\061\110\001\002\000\032\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\047\uffcd\051\uffcd\053\uffcd\057\uffcd\001\002\000\004\050" +
    "\231\001\002\000\004\055\uffcc\001\002\000\010\021\uffcb" +
    "\025\uffcb\055\uffcb\001\002\000\032\003\uffd2\005\uffd2\006" +
    "\uffd2\010\uffd2\012\uffd2\014\uffd2\016\uffd2\017\uffd2\024\uffd2" +
    "\054\uffd2\055\uffd2\061\uffd2\001\002\000\032\003\127\005" +
    "\126\006\114\010\106\012\117\014\122\016\125\017\107" +
    "\024\120\054\121\055\uffc8\061\110\001\002\000\042\003" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\021\uffd9\024\uffd9\025\uffd9\054" +
    "\uffd9\055\uffd9\061\uffd9\001\002\000\004\015\235\001\002" +
    "\000\004\052\236\001\002\000\024\003\242\011\uff95\020" +
    "\135\034\137\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\001\002\000\024\036\uffa9\037\uffa9\040\261\041\257\042" +
    "\256\043\255\044\254\045\253\053\uffa9\001\002\000\006" +
    "\037\251\053\uffaf\001\002\000\010\036\uffaa\037\uffaa\053" +
    "\uffaa\001\002\000\004\053\uffae\001\002\000\010\036\247" +
    "\037\uffac\053\uffac\001\002\000\004\053\245\001\002\000" +
    "\004\047\246\001\002\000\042\003\uffce\005\uffce\006\uffce" +
    "\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\021\uffce\024\uffce\025\uffce\054\uffce\055\uffce\061\uffce" +
    "\001\002\000\022\011\uff95\020\135\034\137\052\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\001\002\000\010\036\uffab" +
    "\037\uffab\053\uffab\001\002\000\022\011\uff95\020\135\034" +
    "\137\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002" +
    "\000\010\036\247\037\uffad\053\uffad\001\002\000\022\011" +
    "\uff8a\020\uff8a\034\uff8a\052\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\001\002\000\022\011\uff8b\020\uff8b\034\uff8b\052" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\001\002\000\022" +
    "\011\uff8c\020\uff8c\034\uff8c\052\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\064\uff8c\001\002\000\022\011\uff8d\020\uff8d\034\uff8d" +
    "\052\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000" +
    "\022\011\uff8e\020\uff8e\034\uff8e\052\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\001\002\000\022\011\uff95\020\135\034" +
    "\137\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002" +
    "\000\022\011\uff8f\020\uff8f\034\uff8f\052\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\001\002\000\010\036\uffa8\037\uffa8" +
    "\053\uffa8\001\002\000\032\003\127\005\126\006\114\010" +
    "\106\012\117\014\122\016\125\017\107\024\120\054\121" +
    "\055\264\061\110\001\002\000\042\003\uffd4\005\uffd4\006" +
    "\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\021\uffd4\024\uffd4\025\uffd4\054\uffd4\055\uffd4\061" +
    "\uffd4\001\002\000\004\047\266\001\002\000\042\003\uffbf" +
    "\005\uffbf\006\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\024\uffbf\025\uffbf\054\uffbf" +
    "\055\uffbf\061\uffbf\001\002\000\024\003\242\011\uff95\020" +
    "\135\034\137\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\001\002\000\004\053\271\001\002\000\030\003\127\005" +
    "\126\006\114\010\106\012\117\014\122\016\125\017\107" +
    "\024\120\054\121\061\110\001\002\000\042\003\uffcf\005" +
    "\uffcf\006\uffcf\010\uffcf\012\uffcf\013\273\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\024\uffcf\025\uffcf\054\uffcf\055" +
    "\uffcf\061\uffcf\001\002\000\030\003\127\005\126\006\114" +
    "\010\106\012\117\014\122\016\125\017\107\024\120\054" +
    "\121\061\110\001\002\000\042\003\uffd1\005\uffd1\006\uffd1" +
    "\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\024\uffd1\025\uffd1\054\uffd1\055\uffd1\061\uffd1" +
    "\001\002\000\042\003\uffd0\005\uffd0\006\uffd0\010\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\024\uffd0\025\uffd0\054\uffd0\055\uffd0\061\uffd0\001\002\000" +
    "\004\047\300\001\002\000\004\047\uffc5\001\002\000\042" +
    "\003\uffc6\005\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\024\uffc6\025\uffc6" +
    "\054\uffc6\055\uffc6\061\uffc6\001\002\000\042\003\uffdd\005" +
    "\uffdd\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\021\uffdd\024\uffdd\025\uffdd\054\uffdd\055" +
    "\uffdd\061\uffdd\001\002\000\022\011\uff95\020\135\034\137" +
    "\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002\000" +
    "\054\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\057\uffb2\001\002\000\004\057\305\001\002\000" +
    "\054\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\057\uffb1\001\002\000\042\003\uffd8\005\uffd8\006" +
    "\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\024\uffd8\025\uffd8\054\uffd8\055\uffd8\061" +
    "\uffd8\001\002\000\004\061\110\001\002\000\004\053\311" +
    "\001\002\000\004\047\312\001\002\000\042\003\uffc3\005" +
    "\uffc3\006\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\024\uffc3\025\uffc3\054\uffc3\055" +
    "\uffc3\061\uffc3\001\002\000\022\011\uff95\020\135\034\137" +
    "\052\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002\000" +
    "\004\047\uffb7\001\002\000\022\011\uff89\020\uff89\034\uff89" +
    "\052\uff89\061\uff89\062\uff89\063\uff89\064\uff89\001\002\000" +
    "\004\047\uffb6\001\002\000\004\047\uffb4\001\002\000\006" +
    "\003\071\061\020\001\002\000\006\051\uffe1\053\uffe1\001" +
    "\002\000\006\051\uffdf\053\uffdf\001\002\000\004\061\051" +
    "\001\002\000\004\047\325\001\002\000\012\003\ufff9\026" +
    "\ufff9\054\ufff9\061\ufff9\001\002\000\006\047\327\051\047" +
    "\001\002\000\012\003\ufffa\026\ufffa\054\ufffa\061\ufffa\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\067\003\001\001\000\002\001\001\000" +
    "\004\066\006\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\012\004\010\005\013\006\016\107\014\001" +
    "\001\000\002\001\001\000\004\107\322\001\001\000\004" +
    "\015\054\001\001\000\002\001\001\000\006\013\052\014" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\022\011\026\013\023\014\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\063\040\104\033\105\036" +
    "\106\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\027\001\001\000\004\011\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\056\070" +
    "\055\071\061\107\057\001\001\000\004\023\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\072\021\071\022\066\107\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\073\001\001\000" +
    "\004\017\075\001\001\000\002\001\001\000\006\006\100" +
    "\107\014\001\001\000\004\026\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\023\014\024\001\001" +
    "\000\030\025\127\027\114\031\123\037\104\042\131\050" +
    "\112\057\130\072\103\073\111\074\115\100\122\001\001" +
    "\000\004\056\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\133\040\275\064\137\101\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\133\064" +
    "\137\101\264\001\001\000\004\026\262\001\001\000\030" +
    "\025\233\027\114\031\123\037\104\042\131\050\112\057" +
    "\130\072\103\073\111\074\115\100\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\133\064\137\101\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\205" +
    "\001\001\000\002\001\001\000\020\072\142\100\141\102" +
    "\145\103\144\104\143\105\147\106\146\001\001\000\004" +
    "\107\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\161\001\001\000\006\060\155" +
    "\062\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\133\064\137\101\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\072\142\100\141" +
    "\102\160\104\143\105\147\106\146\001\001\000\002\001" +
    "\001\000\006\053\164\061\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\072\142\100" +
    "\141\102\145\103\166\104\143\105\147\106\146\001\001" +
    "\000\002\001\001\000\016\032\133\043\173\044\171\045" +
    "\170\064\137\101\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\133\064\137\101\176\001\001\000\002" +
    "\001\001\000\004\054\200\001\001\000\002\001\001\000" +
    "\010\032\133\064\137\101\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\133\064\137\101\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\217\034\216\035\215" +
    "\001\001\000\002\001\001\000\006\035\227\036\226\001" +
    "\001\000\002\001\001\000\004\104\221\001\001\000\002" +
    "\001\001\000\004\026\223\001\001\000\030\025\127\027" +
    "\114\031\123\037\104\042\131\050\112\057\130\072\103" +
    "\073\111\074\115\100\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\231\001\001\000\030\025\127\027\114\031\123\037" +
    "\104\042\131\050\112\057\130\072\103\073\111\074\115" +
    "\100\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\032\133\051\243\064\137\075\240" +
    "\076\242\077\237\101\236\001\001\000\004\055\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\032\133\064\137\075\247\101\236" +
    "\001\001\000\002\001\001\000\014\032\133\064\137\075" +
    "\240\076\251\101\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\133\064\137\101\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\025" +
    "\127\027\114\031\123\037\104\042\131\050\112\057\130" +
    "\072\103\073\111\074\115\100\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\032\133" +
    "\051\267\064\137\075\240\076\242\077\237\101\236\001" +
    "\001\000\002\001\001\000\030\025\271\027\114\031\123" +
    "\037\104\042\131\050\112\057\130\072\103\073\111\074" +
    "\115\100\122\001\001\000\004\030\273\001\001\000\030" +
    "\025\274\027\114\031\123\037\104\042\131\050\112\057" +
    "\130\072\103\073\111\074\115\100\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\133" +
    "\064\137\101\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\133\064\137\101\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\320\107\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\325\011\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BrackArrayList ::= 
            {
              BrackArrayList RESULT = null;
		 RESULT=new NoBrackArrayList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*BrackArrayList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // BrackArrayList ::= LBRACKET RBRACKET 
            {
              BrackArrayList RESULT = null;
		 RESULT=new BrackArrayLst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*BrackArrayList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ConstOption ::= charConst 
            {
              ConstOption RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CharConst c1 = (CharConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstOptionChar(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstOption*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ConstOption ::= boolConst 
            {
              ConstOption RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		BoolConst b1 = (BoolConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstOptionBool(b1); RESULT.setLine(b1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstOption*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ConstOption ::= numConst 
            {
              ConstOption RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		NumConst n1 = (NumConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstOptionNumber(n1); RESULT.setLine(n1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ConstOption*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // charConst ::= CHARCONST 
            {
              CharConst RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConstant(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*charConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // boolConst ::= BOOLCONST 
            {
              BoolConst RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer B1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConstant(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*boolConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // numConst ::= NUMBER 
            {
              NumConst RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumberConstant(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*numConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Assignop ::= EQUAL 
            {
              Assignop RESULT = null;
		 RESULT=new AssignOperator(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= GREATEREQ 
            {
              Relop RESULT = null;
		 RESULT=new GreaterEqRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= LESSEQ 
            {
              Relop RESULT = null;
		 RESULT=new LessEqRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new GreaterRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new LessRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= NOTEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new NotEqualRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Relop ::= ISEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new IsEqualRelOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new ModOption(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new DivOption(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new MulOption(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new MinusOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new PlusOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NegPrefix ::= 
            {
              NegPrefix RESULT = null;
		 RESULT=new NoNegativePrefix(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*NegPrefix*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NegPrefix ::= MINUS 
            {
              NegPrefix RESULT = null;
		 RESULT=new NegativePrefix(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*NegPrefix*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FacorExpression(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= NEW Type ExprFactorOpt 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprFactorOpt E2 = (ExprFactorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNewType(T1, E2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= boolConst 
            {
              Factor RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		BoolConst b1 = (BoolConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBoolConst(b1); RESULT.setLine(b1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= charConst 
            {
              Factor RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CharConst c1 = (CharConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorCharConst(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= numConst 
            {
              Factor RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		NumConst n1 = (NumConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNumConst(n1); RESULT.setLine(n1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= FunctionCall 
            {
              Factor RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FunctionCall F1 = (FunctionCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorFuncCall(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TermRepeat ::= 
            {
              TermRepeat RESULT = null;
		 RESULT=new NoMulOptTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*TermRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TermRepeat ::= Mulop Factor 
            {
              TermRepeat RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F2 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MulOptTerm(M1, F2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*TermRepeat*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Term ::= Factor TermRepeat 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TermRepeat T2 = (TermRepeat)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BasicTerm(F1, T2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprFactorOpt ::= 
            {
              ExprFactorOpt RESULT = null;
		 RESULT=new NoExpressionFactorOption(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*ExprFactorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprFactorOpt ::= LBRACKET Expr RBRACKET 
            {
              ExprFactorOpt RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ExpressionFactorOption(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*ExprFactorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprListVal ::= Addop Term 
            {
              ExprListVal RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionListValue(A1, T2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*ExprListVal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprList ::= 
            {
              ExprList RESULT = null;
		 RESULT=new NoExpressionList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprList ::= ExprList ExprListVal 
            {
              ExprList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ExprList E1 = (ExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprListVal E2 = (ExprListVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionList(E1, E2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= SwitchStmt 
            {
              Expr RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SwitchStmt S1 = (SwitchStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SwitchStatement(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= NegPrefix Term ExprList 
            {
              Expr RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		NegPrefix N1 = (NegPrefix)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Term T2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprList E3 = (ExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expression(N1, T2, E3); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R2 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactorMulti(E1, R2, E3); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactorSingle(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultiCondTerm(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleCondition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condition ::= Condition OR CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultiCondition(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ConditionStmt ::= error 
            {
              ConditionStmt RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak za Condition do ) u liniji "+ lleft, null );  RESULT=new ErrorCondition(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*ConditionStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ConditionStmt ::= Condition 
            {
              ConditionStmt RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionStatemnt(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*ConditionStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesigantorList ::= 
            {
              DesigantorList RESULT = null;
		 RESULT=new NoDsgnList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*DesigantorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesigantorList ::= LBRACKET Expr RBRACKET 
            {
              DesigantorList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DsgnList(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*DesigantorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Designator ::= IDENT DesigantorList 
            {
              Designator RESULT = null;
		int desigantorNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desigantorNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String desigantorName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesigantorList D1 = (DesigantorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator(desigantorName, D1); RESULT.setLine(desigantorNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AssignOpExpr ::= error 
            {
              AssignOpExpr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak za AssignOp do ; u liniji "+ lleft, null );  RESULT=new ErrorAssignExpression(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*AssignOpExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AssignOpExpr ::= Designator Assignop Expr 
            {
              AssignOpExpr RESULT = null;
		int desNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator desName = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AssignOpeeratorExpresion(desName, A1, E2); RESULT.setLine(desNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*AssignOpExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FunctionCall ::= Designator LPAREN ActParsDetail RPAREN 
            {
              FunctionCall RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParsDetail A2 = (ActParsDetail)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FunctionCall(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DesignatorStatement ::= FunctionCall 
            {
              DesignatorStatement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FunctionCall F1 = (FunctionCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementFuncCall(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorStatement ::= AssignOpExpr 
            {
              DesignatorStatement RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AssignOpExpr A1 = (AssignOpExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementAssign(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActParsExprList ::= Expr 
            {
              ActParsExprList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleActParsExprList(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ActParsExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ActParsExprList ::= ActParsExprList COMMA Expr 
            {
              ActParsExprList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActParsExprList A1 = (ActParsExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsExprListList(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ActParsExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ActPars ::= ActParsExprList 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParsExprList A1 = (ActParsExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParameters(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ActParsDetail ::= 
            {
              ActParsDetail RESULT = null;
		 RESULT=new NoActualParametersDetail(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*ActParsDetail*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ActParsDetail ::= ActPars 
            {
              ActParsDetail RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParametersDetail(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*ActParsDetail*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // YieldStmt ::= YIELD Expr SEMI 
            {
              YieldStmt RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new YieldStatamentDetail(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*YieldStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PrintStmtOpt ::= 
            {
              PrintStmtOpt RESULT = null;
		 RESULT=new NoPrintStatementOption(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*PrintStmtOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrintStmtOpt ::= COMMA numConst 
            {
              PrintStmtOpt RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		NumConst n1 = (NumConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PrintStatementOption(n1); RESULT.setLine(n1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*PrintStmtOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrintStmt ::= PRINT LPAREN Expr PrintStmtOpt RPAREN SEMI 
            {
              PrintStmt RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		PrintStmtOpt P2 = (PrintStmtOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStatemtDetail(E1, P2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*PrintStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReadStmt ::= READ LPAREN Designator RPAREN SEMI 
            {
              ReadStmt RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStatementDetail(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReturnExpr ::= 
            {
              ReturnExpr RESULT = null;
		 RESULT=new NoReturnExpression(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*ReturnExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ReturnExpr ::= Expr 
            {
              ReturnExpr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnExpression(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*ReturnExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ReturnStmt ::= RETURN ReturnExpr SEMI 
            {
              ReturnStmt RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ReturnExpr R1 = (ReturnExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnStatementDetail(R1); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DefaulStmt ::= 
            {
              DefaulStmt RESULT = null;
		 RESULT=new NoDefaultStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*DefaulStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DefaulStmt ::= DEFAULT COLON ListStatementOpt 
            {
              DefaulStmt RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ListStatementOpt L1 = (ListStatementOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DefaultStatement(L1); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*DefaulStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SwitchStmtVal ::= CASE numConst COLON ListStatementOpt 
            {
              SwitchStmtVal RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		NumConst n1 = (NumConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ListStatementOpt L2 = (ListStatementOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SwitchStatementValue(n1, L2); RESULT.setLine(n1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*SwitchStmtVal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SwitchStmtList ::= SwitchStmtVal 
            {
              SwitchStmtList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SwitchStmtVal S1 = (SwitchStmtVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleSwitchStatement(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*SwitchStmtList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SwitchStmtList ::= SwitchStmtList SwitchStmtVal 
            {
              SwitchStmtList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		SwitchStmtList S1 = (SwitchStmtList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SwitchStmtVal S2 = (SwitchStmtVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SwitchStatementList(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*SwitchStmtList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SwitchStmtBody ::= SwitchStmtList DefaulStmt 
            {
              SwitchStmtBody RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		SwitchStmtList S1 = (SwitchStmtList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DefaulStmt D2 = (DefaulStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SwitchStatmentBody(S1, D2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*SwitchStmtBody*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SwitchStmt ::= SWITCH LPAREN Expr RPAREN LBRACE SwitchStmtBody RBRACE 
            {
              SwitchStmt RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		SwitchStmtBody S2 = (SwitchStmtBody)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new SwitchStatementDetail(E1, S2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*SwitchStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DoWhileStmt ::= DO Statement WHILE LPAREN ConditionStmt RPAREN SEMI 
            {
              DoWhileStmt RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Statement S1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConditionStmt C2 = (ConditionStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DoWhileStatementDetail(S1, C2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*DoWhileStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ElseStatement ::= 
            {
              ElseStatement RESULT = null;
		 RESULT=new NoElseStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ElseStatement ::= ELSE Statement 
            {
              ElseStatement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ElseStatements(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IfStatement ::= IF LPAREN ConditionStmt RPAREN Statement ElseStatement 
            {
              IfStatement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ConditionStmt C1 = (ConditionStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ElseStatement E3 = (ElseStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfStatement(C1, S2, E3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListStatementOpt ::= 
            {
              ListStatementOpt RESULT = null;
		 RESULT=new NoStatementListOpt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*ListStatementOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListStatementOpt ::= ListStatementOpt Statement 
            {
              ListStatementOpt RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ListStatementOpt L1 = (ListStatementOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementListOpt(L1, S2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*ListStatementOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= LBRACE ListStatementOpt RBRACE 
            {
              Statement RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ListStatementOpt L1 = (ListStatementOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DetailStatement(L1); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= PrintStmt 
            {
              Statement RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		PrintStmt P1 = (PrintStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PrintStatement(P1); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= ReadStmt 
            {
              Statement RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ReadStmt R1 = (ReadStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReadStatement(R1); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= ReturnStmt 
            {
              Statement RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ReturnStmt R1 = (ReturnStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnStatement(R1); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= CONTINUE SEMI 
            {
              Statement RESULT = null;
		 RESULT=new ContinueStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= BREAK SEMI 
            {
              Statement RESULT = null;
		 RESULT=new BreakStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= YieldStmt 
            {
              Statement RESULT = null;
		int Y1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int Y1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		YieldStmt Y1 = (YieldStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new YieldStatment(Y1); RESULT.setLine(Y1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= DoWhileStmt 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DoWhileStmt D1 = (DoWhileStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DoWhileStatement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= IfStatement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		IfStatement I1 = (IfStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfDetalStatement(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= DesignatorStatement SEMI 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesStatement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FromParamsVal ::= error 
            {
              FromParamsVal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak za FormParams do , ili ) u liniji "+ lleft, null );  RESULT=new ErrorFormalParamesComma(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*FromParamsVal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FromParamsVal ::= Type VarVal 
            {
              FromParamsVal RESULT = null;
		int fromTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fromTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type fromType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarVal V1 = (VarVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FromParamsValue(fromType, V1); RESULT.setLine(fromTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*FromParamsVal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FromParamsList ::= FromParamsVal 
            {
              FromParamsList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FromParamsVal F1 = (FromParamsVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleFormParams(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*FromParamsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FromParamsList ::= FromParamsList COMMA FromParamsVal 
            {
              FromParamsList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FromParamsList F1 = (FromParamsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FromParamsVal F2 = (FromParamsVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultiFormParams(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*FromParamsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FromParams ::= 
            {
              FromParams RESULT = null;
		 RESULT=new NoFromParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*FromParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FromParams ::= FromParamsList 
            {
              FromParams RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FromParamsList F1 = (FromParamsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FromParameters(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*FromParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FormParamsEnd ::= RPAREN 
            {
              FormParamsEnd RESULT = null;
		 RESULT=new FormParamsEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*FormParamsEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormParamsBegin ::= LPAREN 
            {
              FormParamsBegin RESULT = null;
		 RESULT=new FormParamsBegin(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*FormParamsBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDelVarList ::= 
            {
              MethodDelVarList RESULT = null;
		 RESULT=new NoMethodDelVarList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*MethodDelVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodDelVarList ::= MethodDelVarList VarDecl 
            {
              MethodDelVarList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDelVarList M1 = (MethodDelVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultiMethodDelVarList(M1, V2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*MethodDelVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodDeclType ::= VOID 
            {
              MethodDeclType RESULT = null;
		 RESULT=new VoidMethodDeclType(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*MethodDeclType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclType ::= Type 
            {
              MethodDeclType RESULT = null;
		int methTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type methType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CustomMethodDeclType(methType); RESULT.setLine(methTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*MethodDeclType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodHeader ::= MethodDeclType IDENT 
            {
              MethodHeader RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclType M1 = (MethodDeclType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodHeader(M1, methName); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*MethodHeader*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDecl ::= MethodHeader FormParamsBegin FromParams FormParamsEnd MethodDelVarList LBRACE ListStatementOpt RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodHeader M1 = (MethodHeader)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		FormParamsBegin F2 = (FormParamsBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FromParams F3 = (FromParams)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int F4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		FormParamsEnd F4 = (FormParamsEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodDelVarList M5 = (MethodDelVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int L6left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L6right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ListStatementOpt L6 = (ListStatementOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclaration(M1, F2, F3, F4, M5, L6); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RepeatMethodDecl ::= 
            {
              RepeatMethodDecl RESULT = null;
		 RESULT=new NoRepeatMethodDeclaration(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*RepeatMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RepeatMethodDecl ::= RepeatMethodDecl MethodDecl 
            {
              RepeatMethodDecl RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		RepeatMethodDecl R1 = (RepeatMethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RepeatMethodDeclaration(R1, M2); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*RepeatMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDecl ::= CLASS IDENT LBRACE RBRACE 
            {
              ClassDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ClassDeclaration(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarVal ::= IDENT BrackArrayList 
            {
              VarVal RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		BrackArrayList B1 = (BrackArrayList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarValue(varName, B1); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*VarVal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarVal 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarVal V1 = (VarVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleVarDeclaration(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclList ::= VarDeclList COMMA VarVal 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarVal V2 = (VarVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= error COMMA VarDeclList SEMI 
            {
              VarDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak za VarDecl do , u liniji "+ lleft, null );  RESULT=new ErrorVarGlobalDeclarationComma(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= error SEMI 
            {
              VarDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak za VarDecl do ; u liniji "+ lleft, null );  RESULT=new ErrorVarGlobalDeclarationSemi(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Type VarDeclList SEMI 
            {
              VarDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclaration(varType, V1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstVal ::= IDENT EQUAL ConstOption 
            {
              ConstVal RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstOption C1 = (ConstOption)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstValue(constName, C1); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ConstVal*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= ConstVal 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVal C1 = (ConstVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleConstDeclaration(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclList ::= ConstDeclList COMMA ConstVal 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVal C2 = (ConstVal)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeckarationList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= error COMMA ConstDeclList SEMI 
            {
              ConstDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak za CONST do , u liniji "+ lleft, null );  RESULT=new ErrorConstGlobalDeclarationComma(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= CONST error SEMI 
            {
              ConstDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak za CONST do ; u liniji "+ lleft, null );  RESULT=new ErrorConstGlobalDeclarationSemi(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type ConstDeclList SEMI 
            {
              ConstDecl RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDeclaration(constType, C1); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramDeclarationListValue ::= VarDecl 
            {
              ProgramDeclarationListValue RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarProgramDeclaration(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramDeclarationListValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclarationListValue ::= ConstDecl 
            {
              ProgramDeclarationListValue RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstProgramDeclaration(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramDeclarationListValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramDeclarationList ::= 
            {
              ProgramDeclarationList RESULT = null;
		 RESULT=new NoDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*ProgramDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramDeclarationList ::= ProgramDeclarationList ProgramDeclarationListValue 
            {
              ProgramDeclarationList RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramDeclarationList P1 = (ProgramDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ProgramDeclarationListValue P2 = (ProgramDeclarationListValue)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultiProgramDeclarationList(P1, P2); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*ProgramDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(progName); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ProgramDeclarationList LBRACE RepeatMethodDecl RBRACE 
            {
              Program RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgName P1 = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ProgramDeclarationList P2 = (ProgramDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		RepeatMethodDecl R3 = (RepeatMethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(P1, P2, R3); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

